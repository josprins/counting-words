{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","text","word","output","n","open","calculateHighestFrequency","isNaN","Number","array","split","obj","mostFreq","which","forEach","i","item","toLowerCase","push","setState","length","toString","replace","calculateFrequencyForWord","specificWordCount","filter","str","calculateMostFrequentNWords","map","reduce","a","b","handleCountAllNWords","sortedArray","Object","entries","sort","multiArr","value","key","alphabeticalArray","reversedSingleArray","reverse","prev","curr","concat","classes","this","props","Container","className","formContainer","Typography","style","fontSize","Collapse","in","Alert","severity","action","IconButton","aria-label","color","size","onClick","root","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","id","label","placeholder","multiline","margin","InputLabelProps","shrink","variant","onChange","target","totalWords","singleWordInput","Button","countBtn","display","justifyContent","resultText","padding","Paper","outputContainer","index","fontFamily","lineHeight","React","withStyles","_theme","createStyles","flexDirection","maxWidth","textTransform","fontWeight","marginTop","textDecoration","withTheme","ReactDOM","render","document","getElementById"],"mappings":"+UAsEMA,E,4MACJC,MAAe,CACbC,KAAM,GACNC,KAAM,GACNC,OAAQ,GACRC,EAAG,GACHC,MAAM,G,EAGRC,0BAAgF,SAC9EL,GAEA,GAAIA,GAAQM,MAAMC,OAAOP,IAAQ,CAC/B,IAAMQ,EAAU,YAAOR,EAAKS,MAAM,MAG9BC,EAAW,GACbC,EAAW,EACXC,EAAe,GAmBjB,OAjBAJ,EAAMK,SAAQ,SAACC,GACb,IAAIC,EAAOD,EAAEE,cACRN,EAAIK,GAGPL,EAAIK,KAFJL,EAAIK,GAAQ,EAKVL,EAAIK,GAAQJ,GACdA,EAAWD,EAAIK,GACfH,EAAQ,CAACG,IACAL,EAAIK,KAAUJ,GACvBC,EAAMK,KAAKF,MAKR,EAAKG,SAAS,CACnBhB,OAAO,iBAAD,OACJU,EAAMO,OAAS,EAAI,YAAc,UAD7B,cAEAP,EAAMQ,WAAWC,QAAQ,KAAM,OAF/B,iBAGJT,EAAMO,OAAS,EAAI,cAAgB,aAH/B,YAIFR,EAJE,YAIUA,EAAW,EAAI,QAAU,UAG3C,EAAKO,SAAS,CAAEd,MAAM,K,EAI1BkB,0BAAgF,SAC9EtB,EACAC,GAEA,GAAID,GAAQM,MAAMC,OAAOP,KAAUC,GAAQK,MAAMC,OAAOP,IAAQ,CAC9D,IAGMuB,EAHK,YAAOvB,EAAKS,MAAM,MAGGe,QAC9B,SAAAC,GAAG,OACDA,EAAIT,cAAcK,QAAQ,2BAA4B,MAAQpB,EAAKe,iBACrEG,OAGF,EAAKD,SAAS,CACZhB,OAAO,IAAD,OAAMD,EAAN,oBAAsBsB,EAAtB,YACJA,EAAoB,GAA2B,IAAtBA,EAA0B,QAAU,eAIjE,EAAKL,SAAS,CAAEd,MAAM,K,EAI1BsB,4BAAoF,SAAA1B,GAClF,IAAMQ,EAAK,YAAOR,EAAKS,MAAM,MAC7B,GAAIT,GAAQM,MAAMC,OAAOP,IAEvB,OAAOQ,EACJmB,KAAI,SAAA1B,GAAI,OAAIA,EAAKe,cAAcK,QAAQ,4BAA6B,OACpEO,QAAO,SAACC,EAAQC,GAOf,MANoB,qBAATD,EAAEC,GACXD,EAAEC,GAAK,EAEPD,EAAEC,IAAM,EAGHD,IACN,K,EAITE,qBAAuB,SAAC/B,EAAcG,GACpC,GAAIH,IAASM,MAAMC,OAAOJ,IAAK,CAE7B,IAAM6B,EAAcC,OAAOC,QAAQ,EAAKR,4BAA4B1B,EAAMG,IAAIgC,MAC5E,SAAUN,EAAQC,GAChB,OAAOA,EAAE,GAAKD,EAAE,MAKpBG,EAAYb,OAASZ,OAAOJ,GAe5B,IAZA,IAAMiC,EAAkBH,OAAOC,QAC7BF,EAAYJ,QAAO,SAAUlB,EAAU2B,GACrC,IAAIC,EAAMD,EAAM,GAIhB,OAHgB,MAAZ3B,EAAI4B,KAAc5B,EAAI4B,GAAO,IAEjC5B,EAAI4B,GAAKrB,KAAKoB,GACP3B,IACN,KAIC6B,EAA2B,GACxBzB,EAAI,EAAGA,EAAIsB,EAASjB,OAAQL,IACnCyB,EAAkBtB,KAAKmB,EAAStB,GAAG,GAAGqB,QAIxC,IAAMK,EAAsBD,EACzBE,UACAb,QAAO,SAAUc,EAAMC,GACtB,OAAOD,EAAKE,OAAOD,MAIvB,EAAKzB,SAAS,CACZhB,OAAQsC,SAGV,EAAKtB,SAAS,CAAEd,MAAM,K,4CAI1B,WAAU,IAAD,OACCyC,EAAYC,KAAKC,MAAjBF,QADD,EAEiCC,KAAK/C,MAArCC,EAFD,EAECA,KAAMC,EAFP,EAEOA,KAAMC,EAFb,EAEaA,OAAQC,EAFrB,EAEqBA,EAAGC,EAFxB,EAEwBA,KAE/B,OACE,eAAC4C,EAAA,EAAD,CAAWC,UAAWJ,EAAQK,cAA9B,UACE,cAACC,EAAA,EAAD,CAAYC,MAAO,CAAEC,SAAU,OAA/B,4BACA,cAACC,EAAA,EAAD,CAAUC,GAAInD,EAAd,SACE,cAACoD,EAAA,EAAD,CACEC,SAAS,QACTC,OACE,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,WACP,EAAK7C,SAAS,CAAEd,MAAM,KAL1B,SAQE,cAAC,IAAD,CAAWiD,SAAS,cAX1B,mEAkBF,uBACEJ,UAAWJ,EAAQmB,KACnBC,YAAU,EACVC,aAAa,MACbC,SAAU,SAAAC,GAAC,OAAIA,EAAEC,kBAJnB,UAME,cAACC,EAAA,EAAD,CACEC,GAAG,WACHC,MAAM,cACNC,YAAY,0BACZC,WAAS,EACTrC,MAAOrC,EACP2E,OAAO,SACPC,gBAAiB,CACfC,QAAQ,GAEVC,QAAQ,WACRC,SAAU,SAAAX,GACR,EAAKlD,SAAS,CAAElB,KAAMoE,EAAEY,OAAO3C,WAGnC,cAACc,EAAA,EAAD,CAAYF,UAAWJ,EAAQoC,WAA/B,SACGjF,GAAI,uBAAoB,YAAIA,EAAKS,MAAM,MAAMU,UAGhD,cAACmD,EAAA,EAAD,CACEC,GAAG,WACHO,QAAQ,WACRN,MAAM,gBACNC,YAAY,4BACZpC,MAAOpC,EACPgD,UAAWJ,EAAQqC,gBACnBpB,KAAK,QACLiB,SAAU,SAAAX,GAAC,OAAI,EAAKlD,SAAS,CAAEjB,KAAMmE,EAAEY,OAAO3C,SAC9CuC,gBAAiB,CACfC,QAAQ,KAGZ,cAACP,EAAA,EAAD,CACEC,GAAG,WACHO,QAAQ,WACRN,MAAM,cACNC,YAAY,uBACZpC,MAAOlC,EACP8C,UAAWJ,EAAQqC,gBACnBpB,KAAK,QACLiB,SAAU,SAAAX,GAAC,OAAI,EAAKlD,SAAS,CAAEf,EAAGiE,EAAEY,OAAO3C,SAC3CuC,gBAAiB,CACfC,QAAQ,KAGZ,cAACM,EAAA,EAAD,CACElC,UAAWJ,EAAQuC,SACnBtB,KAAK,SACLgB,QAAQ,YACRf,QAAS,WACP,EAAK1D,0BAA0BL,IALnC,wCAUA,cAACmF,EAAA,EAAD,CACElC,UAAWJ,EAAQuC,SACnBtB,KAAK,SACLgB,QAAQ,YACRf,QAAS,kBAAM,EAAKzC,0BAA0BtB,EAAMC,IAJtD,8CAQA,cAACkF,EAAA,EAAD,CACElC,UAAWJ,EAAQuC,SACnBtB,KAAK,SACLgB,QAAQ,YACRf,QAAS,kBAAM,EAAKhC,qBAAqB/B,EAAMG,IAJjD,yEASDD,GACC,qCACE,sBAAKkD,MAAO,CAAEiC,QAAS,OAAQC,eAAgB,iBAA/C,UACE,cAACnC,EAAA,EAAD,CAAYF,UAAWJ,EAAQ0C,WAA/B,qBACA,cAACJ,EAAA,EAAD,CACElC,UAAWJ,EAAQuC,SACnBhC,MAAO,CAAEoC,QAAS,UAAW3B,MAAO,QACpCC,KAAK,SACLD,MAAM,YACNiB,QAAQ,YACRf,QAAS,kBACP,EAAK7C,SAAS,CACZlB,KAAM,GACNC,KAAM,GACNE,EAAG,GACHD,OAAQ,GACRE,MAAM,KAZZ,sBAmBF,eAACqF,EAAA,EAAD,CAAOxC,UAAWJ,EAAQ6C,gBAA1B,UACqB,kBAAXxF,EAAsB,KAAO,KAClB,kBAAXA,EACNA,EAAOyB,KAAI,SAACZ,EAAa4E,GAAd,OACT,oBAEEvC,MAAO,CACLwC,WAAY,uBACZP,QAAS,eACTQ,WAAY,OALhB,sBAQQ9E,EAAK,GARb,cAQqBA,EAAK,GAR1B,aASIb,EAAOiB,SAAWwE,EAAQ,EAAI,GAAK,MATvC,SACOA,MAcT,mBAAGvC,MAAO,CAAEwC,WAAY,wBAAxB,SAAmD1F,IAGlC,kBAAXA,EAAsB,IAAM,kB,GA7RhC4F,aAsSHC,eA/VA,SAACC,GAAD,OACbC,YAAa,CACXjC,KAAM,CACJqB,QAAS,OACTa,cAAe,UAEjBhD,cAAe,CACbiD,SAAU,QACVxB,OAAQ,oBAEVS,SAAU,CACRT,OAAQ,aACRd,MAAO,UACPuC,cAAe,OACfC,WAAY,KAEdnB,gBAAiB,CACf7B,SAAU,QACViD,UAAW,QAEbrB,WAAY,CACV5B,SAAU,SACVQ,MAAO,UACPc,OAAQ,mBAEVe,gBAAiB,CACfY,UAAW,OACXd,QAAS,QAEXD,WAAY,CACVe,UAAW,OACXzC,MAAO,UACP0C,eAAgB,qBAChBX,WAAY,gCA8TgB,CAAEY,WAAW,GAAhCT,CAAwCjG,GCvWvD2G,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.17cc0f02.chunk.js","sourcesContent":["import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport Alert from '@material-ui/lab/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core/styles';\n\n// Custom Material UI styles\nconst styles = (_theme: any) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    formContainer: {\n      maxWidth: '500px',\n      margin: '25px auto 0 auto',\n    },\n    countBtn: {\n      margin: '10px 0 0 0',\n      color: '#535353',\n      textTransform: 'none',\n      fontWeight: 400,\n    },\n    singleWordInput: {\n      fontSize: '0.2em',\n      marginTop: '10px',\n    },\n    totalWords: {\n      fontSize: '0.65em',\n      color: '5#35353',\n      margin: '-5px 0 0px 15px',\n    },\n    outputContainer: {\n      marginTop: '10px',\n      padding: '10px',\n    },\n    resultText: {\n      marginTop: '10px',\n      color: '#4a4a4a',\n      textDecoration: 'underline wave 1px',\n      fontFamily: \"'Roboto Mono', monospace\",\n    },\n  });\n\n// Interfaces\ninterface Props extends WithStyles<typeof styles> {\n  classes: any;\n}\n\ninterface WordFrequencyAnalyzer {\n  calculateHighestFrequency(text: string): number | string;\n  calculateFrequencyForWord(text: string, word: string): number;\n  calculateMostFrequentNWords(text: string, n: string): [];\n  handleCountAllWords(text: string, n: number): Object;\n}\n\ninterface State {\n  text: string;\n  output: any;\n  word: string;\n  n: string;\n  open: boolean;\n}\n\nclass App extends React.Component<WordFrequencyAnalyzer | Props['classes'], State> {\n  state: State = {\n    text: '',\n    word: '',\n    output: '',\n    n: '',\n    open: false,\n  };\n\n  calculateHighestFrequency: WordFrequencyAnalyzer['calculateHighestFrequency'] = (\n    text: string\n  ): any => {\n    if (text && isNaN(Number(text))) {\n      const array: any = [...text.split(' ')];\n\n      // Find most frequent array element(s) ({wich}) with their occurance ({mostFreq})\n      var obj: any = {},\n        mostFreq = 0,\n        which: any[] = [];\n\n      array.forEach((i: string) => {\n        let item = i.toLowerCase();\n        if (!obj[item]) {\n          obj[item] = 1;\n        } else {\n          obj[item]++;\n        }\n\n        if (obj[item] > mostFreq) {\n          mostFreq = obj[item];\n          which = [item];\n        } else if (obj[item] === mostFreq) {\n          which.push(item);\n        }\n      });\n\n      // Set output\n      return this.setState({\n        output: `The most used ${\n          which.length > 1 ? 'words are' : 'word is'\n        }: \"${which.toString().replace(/,/g, ' & ')}\" and ${\n          which.length > 1 ? 'they appear' : 'it appears'\n        } ${mostFreq} ${mostFreq > 1 ? 'times' : 'time'}`,\n      });\n    } else {\n      this.setState({ open: true });\n    }\n  };\n\n  calculateFrequencyForWord: WordFrequencyAnalyzer['calculateFrequencyForWord'] = (\n    text,\n    word\n  ): any => {\n    if (text && isNaN(Number(text)) && word && isNaN(Number(text))) {\n      const array = [...text.split(' ')];\n\n      // Filter out array elements that match the input word, put into new array and get array length\n      const specificWordCount = array.filter(\n        str =>\n          str.toLowerCase().replace(/[.,#!$%^&*;:{}=\\-_`~()]/g, '') === word.toLowerCase()\n      ).length;\n\n      // Set output\n      this.setState({\n        output: `\"${word}\" occurs ${specificWordCount} ${\n          specificWordCount > 1 || specificWordCount === 0 ? 'times' : 'time'\n        }`,\n      });\n    } else {\n      this.setState({ open: true });\n    }\n  };\n\n  calculateMostFrequentNWords: WordFrequencyAnalyzer['calculateMostFrequentNWords'] = text => {\n    const array = [...text.split(' ')];\n    if (text && isNaN(Number(text))) {\n      // Return object where key = string and value = occurance\n      return array\n        .map(word => word.toLowerCase().replace(/[.,#!$%^&*;\":{}=\\-_`~()]/g, ''))\n        .reduce((a: any, b: any): any => {\n          if (typeof a[b] === 'undefined') {\n            a[b] = 1;\n          } else {\n            a[b] += 1;\n          }\n\n          return a;\n        }, {});\n    }\n  };\n\n  handleCountAllNWords = (text: string, n: string) => {\n    if (text && !isNaN(Number(n))) {\n      // Turn into array and sort on value (occurance)\n      const sortedArray = Object.entries(this.calculateMostFrequentNWords(text, n)).sort(\n        function (a: any, b: any) {\n          return b[1] - a[1];\n        }\n      );\n\n      // Shorten array length by input N\n      sortedArray.length = Number(n);\n\n      // Push array items with the exact same value into sepperate arrays to form multidemensional array\n      const multiArr: any[] = Object.entries(\n        sortedArray.reduce(function (obj: any, value: any) {\n          var key = value[1];\n          if (obj[key] == null) obj[key] = [];\n\n          obj[key].push(value);\n          return obj;\n        }, {})\n      );\n\n      // Sort nested array items in ascendant alphabetical order\n      const alphabeticalArray: any[] = [];\n      for (let i = 0; i < multiArr.length; i++) {\n        alphabeticalArray.push(multiArr[i][1].sort());\n      }\n\n      // Reverse array so it starts with items with the highest value (occurance) and convert multidemensional array into single array\n      const reversedSingleArray = alphabeticalArray\n        .reverse()\n        .reduce(function (prev, curr) {\n          return prev.concat(curr);\n        });\n\n      // Set output\n      this.setState({\n        output: reversedSingleArray,\n      });\n    } else {\n      this.setState({ open: true });\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { text, word, output, n, open } = this.state;\n\n    return (\n      <Container className={classes.formContainer}>\n        <Typography style={{ fontSize: '2em' }}>Counting Words</Typography>\n        <Collapse in={open}>\n          <Alert\n            severity='error'\n            action={\n              <IconButton\n                aria-label='close'\n                color='inherit'\n                size='small'\n                onClick={() => {\n                  this.setState({ open: false });\n                }}\n              >\n                <CloseIcon fontSize='inherit' />\n              </IconButton>\n            }\n          >\n            Please provide the right data for the input fields!\n          </Alert>\n        </Collapse>\n        <form\n          className={classes.root}\n          noValidate\n          autoComplete='off'\n          onSubmit={e => e.preventDefault()}\n        >\n          <TextField\n            id='outlined'\n            label='Input Field'\n            placeholder='Type any text in here..'\n            multiline\n            value={text}\n            margin='normal'\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant='outlined'\n            onChange={e => {\n              this.setState({ text: e.target.value });\n            }}\n          />\n          <Typography className={classes.totalWords}>\n            {text && `Total words: ${[...text.split(' ')].length}`}\n          </Typography>\n\n          <TextField\n            id='outlined'\n            variant='outlined'\n            label='Specific Word'\n            placeholder='Type a single word here..'\n            value={word}\n            className={classes.singleWordInput}\n            size='small'\n            onChange={e => this.setState({ word: e.target.value })}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <TextField\n            id='outlined'\n            variant='outlined'\n            label='List Length'\n            placeholder='Type a number here..'\n            value={n}\n            className={classes.singleWordInput}\n            size='small'\n            onChange={e => this.setState({ n: e.target.value })}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <Button\n            className={classes.countBtn}\n            size='medium'\n            variant='contained'\n            onClick={() => {\n              this.calculateHighestFrequency(text);\n            }}\n          >\n            Find Most Frequent Word(s)\n          </Button>\n          <Button\n            className={classes.countBtn}\n            size='medium'\n            variant='contained'\n            onClick={() => this.calculateFrequencyForWord(text, word)}\n          >\n            Find Most Frequent Specific Word\n          </Button>\n          <Button\n            className={classes.countBtn}\n            size='medium'\n            variant='contained'\n            onClick={() => this.handleCountAllNWords(text, n)}\n          >\n            Find The Most Frequent Word(s) With Provided List Length\n          </Button>\n        </form>\n        {output && (\n          <>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Typography className={classes.resultText}>Result:</Typography>\n              <Button\n                className={classes.countBtn}\n                style={{ padding: '1px 8px', color: '#fff' }}\n                size='medium'\n                color='secondary'\n                variant='contained'\n                onClick={() =>\n                  this.setState({\n                    text: '',\n                    word: '',\n                    n: '',\n                    output: '',\n                    open: false,\n                  })\n                }\n              >\n                reset\n              </Button>\n            </div>\n            <Paper className={classes.outputContainer}>\n              {typeof output !== 'string' ? '{ ' : null}\n              {typeof output !== 'string' ? (\n                output.map((item: any[], index: number) => (\n                  <p\n                    key={index}\n                    style={{\n                      fontFamily: \"'Roboto', sans-serif\",\n                      display: 'inline-block',\n                      lineHeight: '0px',\n                    }}\n                  >\n                    {`(\"${item[0]}\": ${item[1]}) ${\n                      output.length === index + 1 ? '' : ', '\n                    }`}\n                    &nbsp;\n                  </p>\n                ))\n              ) : (\n                <p style={{ fontFamily: \"'Roboto', sans-serif\" }}>{output}</p>\n              )}\n\n              {typeof output !== 'string' ? '}' : null}\n            </Paper>\n          </>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}